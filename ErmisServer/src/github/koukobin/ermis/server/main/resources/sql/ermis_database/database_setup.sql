/* Copyright (C) 2024 Ilias Koukovinis <ilias.koukovinis@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    email TEXT NOT NULL UNIQUE,
    password_hash CHAR(PASSWORD_HASH_LENGTH) NOT NULL,
    client_id INT PRIMARY KEY NOT NULL, -- IDs are generated manually within server
    backup_verification_codes CHAR(BACKUP_VERIFICATION_CODES_LENGTH)[BACKUP_VERIFICATION_CODES_AMOUNT] NOT NULL,
    salt CHAR(SALT_LENGTH) NOT NULL,
    created_at TIMESTAMP DEFAULT now(),
    updated_at TIMESTAMP DEFAULT now() ON UPDATE now()
);

CREATE INDEX IF NOT EXISTS users_client_id_index ON users (client_id);
CREATE INDEX IF NOT EXISTS users_email_index ON users (email);

CREATE TABLE IF NOT EXISTS user_profiles (
    client_id INT NOT NULL REFERENCES users(client_id) ON DELETE CASCADE,
    display_name VARCHAR(USERNAME_LENGTH) NOT NULL,
    about VARCHAR(128) NOT NULL,
    profile_photo BYTEA,
    updated_at TIMESTAMP DEFAULT now() ON UPDATE now(),
    PRIMARY KEY (client_id)
);

CREATE INDEX IF NOT EXISTS user_profiles_display_name_index ON user_profiles (display_name);
CREATE INDEX IF NOT EXISTS user_profiles_about_index ON user_profiles (about);

-- Create user ips table
CREATE TYPE device_type_enum AS ENUM ('MOBILE', 'DESKTOP');

CREATE TABLE IF NOT EXISTS user_ips (
    ip_id SERIAL PRIMARY KEY,
    client_id INT NOT NULL REFERENCES users(client_id) ON DELETE CASCADE,
    ip_address TEXT NOT NULL UNIQUE,
    device_type device_type_enum NOT NULL
);

CREATE INDEX IF NOT EXISTS user_ips_id_index ON user_ips (ip_id);
CREATE INDEX IF NOT EXISTS user_ips_ip_address_index ON user_ips (ip_address);

-- Create chat requests tables
CREATE TABLE IF NOT EXISTS chat_requests (
    chat_request_id SERIAL,
    receiver_client_id INTEGER NOT NULL,
    sender_client_id INTEGER NOT NULL,
    PRIMARY KEY (receiver_client_id, sender_client_id)
);

-- Create chat sessions table
CREATE TABLE IF NOT EXISTS chat_sessions (
    chat_session_id INTEGER NOT NULL PRIMARY KEY, -- IDs are generated manually within server
    created_at TIMESTAMP NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS chat_session_members (
    chat_session_id INT NOT NULL REFERENCES chat_sessions(chat_session_id) ON DELETE CASCADE,
    member_id INT NOT NULL REFERENCES users(client_id) ON DELETE CASCADE,
    joined_at TIMESTAMP NOT NULL DEFAULT now(),
    PRIMARY KEY (chat_session_id, member_id) -- Ensures unique member-session relationships
);


CREATE INDEX IF NOT EXISTS chat_session_id_index ON chat_sessions (chat_session_id);

-- Create chat messages table
CREATE TABLE IF NOT EXISTS chat_messages (
    ts_entered TIMESTAMP NOT NULL DEFAULT now(),
    message_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    chat_session_id INTEGER NOT NULL REFERENCES chat_sessions (chat_session_id) ON DELETE CASCADE,
    client_id INTEGER NOT NULL REFERENCES users (client_id) ON DELETE CASCADE,
    text BYTEA,
    file_name TEXT,
    file_bytes BYTEA,
    content_type INTEGER NOT NULL,
    PRIMARY KEY (chat_session_id, message_id),
    CHECK (text IS NOT NULL OR file_bytes IS NOT NULL),
    CONSTRAINT fk_chat_session FOREIGN KEY (chat_session_id) REFERENCES chat_sessions (chat_session_id),
    CONSTRAINT fk_sender_client FOREIGN KEY (client_id) REFERENCES users (client_id)
);

CREATE INDEX IF NOT EXISTS message_id_index ON chat_messages (message_id);

